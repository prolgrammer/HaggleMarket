// Code generated by MockGen. DO NOT EDIT.
// Source: product.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/EM-Stawberry/Stawberry/internal/domain/entity"
	model "github.com/EM-Stawberry/Stawberry/internal/repository/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAttributesByID mocks base method.
func (m *MockRepository) GetAttributesByID(ctx context.Context, productID string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributesByID", ctx, productID)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributesByID indicates an expected call of GetAttributesByID.
func (mr *MockRepositoryMockRecorder) GetAttributesByID(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributesByID", reflect.TypeOf((*MockRepository)(nil).GetAttributesByID), ctx, productID)
}

// GetAverageRatingByProductID mocks base method.
func (m *MockRepository) GetAverageRatingByProductID(ctx context.Context, productID int) (float64, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageRatingByProductID", ctx, productID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAverageRatingByProductID indicates an expected call of GetAverageRatingByProductID.
func (mr *MockRepositoryMockRecorder) GetAverageRatingByProductID(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageRatingByProductID", reflect.TypeOf((*MockRepository)(nil).GetAverageRatingByProductID), ctx, productID)
}

// GetFilteredProducts mocks base method.
func (m *MockRepository) GetFilteredProducts(ctx context.Context, filter model.ProductFilter, limit, offset int) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredProducts", ctx, filter, limit, offset)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredProducts indicates an expected call of GetFilteredProducts.
func (mr *MockRepositoryMockRecorder) GetFilteredProducts(ctx, filter, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredProducts", reflect.TypeOf((*MockRepository)(nil).GetFilteredProducts), ctx, filter, limit, offset)
}

// GetFilteredProductsCount mocks base method.
func (m *MockRepository) GetFilteredProductsCount(ctx context.Context, filter model.ProductFilter) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredProductsCount", ctx, filter)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredProductsCount indicates an expected call of GetFilteredProductsCount.
func (mr *MockRepositoryMockRecorder) GetFilteredProductsCount(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredProductsCount", reflect.TypeOf((*MockRepository)(nil).GetFilteredProductsCount), ctx, filter)
}

// GetPriceRangeByProductID mocks base method.
func (m *MockRepository) GetPriceRangeByProductID(ctx context.Context, productID int) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceRangeByProductID", ctx, productID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPriceRangeByProductID indicates an expected call of GetPriceRangeByProductID.
func (mr *MockRepositoryMockRecorder) GetPriceRangeByProductID(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceRangeByProductID", reflect.TypeOf((*MockRepository)(nil).GetPriceRangeByProductID), ctx, productID)
}

// GetProductByID mocks base method.
func (m *MockRepository) GetProductByID(ctx context.Context, id string) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, id)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockRepositoryMockRecorder) GetProductByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockRepository)(nil).GetProductByID), ctx, id)
}
