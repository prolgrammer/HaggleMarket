services:
  app:
    build:
      context: ./..
      dockerfile: deploy/Dockerfile
    restart: unless-stopped
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_MAX_OPEN_CONNS=4
      - DB_MAX_IDLE_CONNS=2
      - SERVER_PORT=${SERVER_PORT}
      - TOKEN_SECRET=${TOKEN_SECRET}
      - TOKEN_ACCESS_DURATION=${TOKEN_ACCESS_DURATION}
      - TOKEN_REFRESH_DURATION=${TOKEN_REFRESH_DURATION}
      - ENVIRONMENT=${ENVIRONMENT}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=PathPrefix(`/`)"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.services.app.loadbalancer.server.port=${SERVER_PORT}"

  db:
    image: postgres:17-alpine
    ports: 
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network

  traefik:
    image: traefik:v3.4
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-config:/etc/traefik
    networks:
      - app-network
    depends_on:
      - app
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=DEBUG"

volumes:
  db-data:
  traefik-config:

networks:
  app-network:
