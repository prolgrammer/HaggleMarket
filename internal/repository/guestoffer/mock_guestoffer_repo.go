// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/guestoffer/guestoffer_repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/guestoffer/guestoffer_repo.go -destination=internal/repository/guestoffer/mock_guestoffer_repo.go -package=guestoffer
//

// Package guestoffer is a generated GoMock package.
package guestoffer

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStoreInfoGetter is a mock of StoreInfoGetter interface.
type MockStoreInfoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockStoreInfoGetterMockRecorder
	isgomock struct{}
}

// MockStoreInfoGetterMockRecorder is the mock recorder for MockStoreInfoGetter.
type MockStoreInfoGetterMockRecorder struct {
	mock *MockStoreInfoGetter
}

// NewMockStoreInfoGetter creates a new mock instance.
func NewMockStoreInfoGetter(ctrl *gomock.Controller) *MockStoreInfoGetter {
	mock := &MockStoreInfoGetter{ctrl: ctrl}
	mock.recorder = &MockStoreInfoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreInfoGetter) EXPECT() *MockStoreInfoGetterMockRecorder {
	return m.recorder
}

// GetStoreOwnerEmailByStoreID mocks base method.
func (m *MockStoreInfoGetter) GetStoreOwnerEmailByStoreID(ctx context.Context, storeID uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreOwnerEmailByStoreID", ctx, storeID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreOwnerEmailByStoreID indicates an expected call of GetStoreOwnerEmailByStoreID.
func (mr *MockStoreInfoGetterMockRecorder) GetStoreOwnerEmailByStoreID(ctx, storeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreOwnerEmailByStoreID", reflect.TypeOf((*MockStoreInfoGetter)(nil).GetStoreOwnerEmailByStoreID), ctx, storeID)
}
