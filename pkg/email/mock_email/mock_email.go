// Code generated by MockGen. DO NOT EDIT.
// Source: email.go
//
// Generated by this command:
//
//	mockgen -source=email.go -destination=mock_email/mock_email.go -package=mock_email
//

// Package mock_email is a generated GoMock package.
package mock_email

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMailerService is a mock of MailerService interface.
type MockMailerService struct {
	ctrl     *gomock.Controller
	recorder *MockMailerServiceMockRecorder
	isgomock struct{}
}

// MockMailerServiceMockRecorder is the mock recorder for MockMailerService.
type MockMailerServiceMockRecorder struct {
	mock *MockMailerService
}

// NewMockMailerService creates a new mock instance.
func NewMockMailerService(ctrl *gomock.Controller) *MockMailerService {
	mock := &MockMailerService{ctrl: ctrl}
	mock.recorder = &MockMailerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailerService) EXPECT() *MockMailerServiceMockRecorder {
	return m.recorder
}

// OfferReceived mocks base method.
func (m *MockMailerService) OfferReceived(offerID uint, userMail string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OfferReceived", offerID, userMail)
}

// OfferReceived indicates an expected call of OfferReceived.
func (mr *MockMailerServiceMockRecorder) OfferReceived(offerID, userMail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferReceived", reflect.TypeOf((*MockMailerService)(nil).OfferReceived), offerID, userMail)
}

// Registered mocks base method.
func (m *MockMailerService) Registered(userName, userMail string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Registered", userName, userMail)
}

// Registered indicates an expected call of Registered.
func (mr *MockMailerServiceMockRecorder) Registered(userName, userMail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registered", reflect.TypeOf((*MockMailerService)(nil).Registered), userName, userMail)
}

// SendGuestOfferNotification mocks base method.
func (m *MockMailerService) SendGuestOfferNotification(email, subject, body string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendGuestOfferNotification", email, subject, body)
}

// SendGuestOfferNotification indicates an expected call of SendGuestOfferNotification.
func (mr *MockMailerServiceMockRecorder) SendGuestOfferNotification(email, subject, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGuestOfferNotification", reflect.TypeOf((*MockMailerService)(nil).SendGuestOfferNotification), email, subject, body)
}

// StatusUpdate mocks base method.
func (m *MockMailerService) StatusUpdate(offerID uint, status, userMail string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusUpdate", offerID, status, userMail)
}

// StatusUpdate indicates an expected call of StatusUpdate.
func (mr *MockMailerServiceMockRecorder) StatusUpdate(offerID, status, userMail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusUpdate", reflect.TypeOf((*MockMailerService)(nil).StatusUpdate), offerID, status, userMail)
}

// Stop mocks base method.
func (m *MockMailerService) Stop(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", ctx)
}

// Stop indicates an expected call of Stop.
func (mr *MockMailerServiceMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMailerService)(nil).Stop), ctx)
}
