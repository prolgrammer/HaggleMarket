// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/guestoffer/guestoffer_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/service/guestoffer/guestoffer_service.go -destination=internal/domain/service/guestoffer/mock_guestoffer_service.go -package=guestoffer
//

// Package guestoffer is a generated GoMock package.
package guestoffer

import (
	context "context"
	reflect "reflect"

	entity "github.com/EM-Stawberry/Stawberry/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationSender is a mock of NotificationSender interface.
type MockNotificationSender struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationSenderMockRecorder
	isgomock struct{}
}

// MockNotificationSenderMockRecorder is the mock recorder for MockNotificationSender.
type MockNotificationSenderMockRecorder struct {
	mock *MockNotificationSender
}

// NewMockNotificationSender creates a new mock instance.
func NewMockNotificationSender(ctrl *gomock.Controller) *MockNotificationSender {
	mock := &MockNotificationSender{ctrl: ctrl}
	mock.recorder = &MockNotificationSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationSender) EXPECT() *MockNotificationSenderMockRecorder {
	return m.recorder
}

// SendGuestOfferNotification mocks base method.
func (m *MockNotificationSender) SendGuestOfferNotification(email, subject, body string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendGuestOfferNotification", email, subject, body)
}

// SendGuestOfferNotification indicates an expected call of SendGuestOfferNotification.
func (mr *MockNotificationSenderMockRecorder) SendGuestOfferNotification(email, subject, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGuestOfferNotification", reflect.TypeOf((*MockNotificationSender)(nil).SendGuestOfferNotification), email, subject, body)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ProcessGuestOffer mocks base method.
func (m *MockService) ProcessGuestOffer(ctx context.Context, offerData entity.GuestOfferData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessGuestOffer", ctx, offerData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessGuestOffer indicates an expected call of ProcessGuestOffer.
func (mr *MockServiceMockRecorder) ProcessGuestOffer(ctx, offerData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessGuestOffer", reflect.TypeOf((*MockService)(nil).ProcessGuestOffer), ctx, offerData)
}
